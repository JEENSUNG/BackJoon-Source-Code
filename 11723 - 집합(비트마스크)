import java.util.*;
import java.io.*;
public class  Main{
	public static final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	public static final BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	public static StringBuilder sb = new StringBuilder();
    public static void main(String[] args) throws IOException {
//        add x: S에 x를 추가한다. (1 ≤ x ≤ 20) S에 x가 이미 있는 경우에는 연산을 무시한다.
//        remove x: S에서 x를 제거한다. (1 ≤ x ≤ 20) S에 x가 없는 경우에는 연산을 무시한다.
//        check x: S에 x가 있으면 1을, 없으면 0을 출력한다. (1 ≤ x ≤ 20)
//        toggle x: S에 x가 있으면 x를 제거하고, 없으면 x를 추가한다. (1 ≤ x ≤ 20)
//        all: S를 {1, 2, ..., 20} 으로 바꾼다.
//        empty: S를 공집합으로 바꾼다. 
    	int n = Integer.parseInt(br.readLine());
    	int bitset = 0;
        while(n-- > 0){
        	StringTokenizer st = new StringTokenizer(br.readLine());
        	String str = st.nextToken();
        	int num;
            switch(str) {
            	case "add":
            		num = Integer.parseInt(st.nextToken());
            		bitset |= (1 << (num-1));
            		break;
            		//bitset == bitset | (1 << (num-1)); 와 같음.
            	case "remove":
            		num = Integer.parseInt(st.nextToken());
            		bitset &= ~(1 << (num-1));
            		break;
            	case "check":
            		num = Integer.parseInt(st.nextToken());
            		sb.append((bitset & (1 << (num-1))) != 0 ? "1\n" : "0\n");
            		break;
            	case "toggle":
            		num = Integer.parseInt(st.nextToken());
            		bitset ^= (1 << (num-1));
            		break;
            	case "all":
            		bitset |= (~0);
            		break;
            	case "empty":
            		bitset &= 0;
            		break;
            }
        }
        bw.write(sb.toString());
        bw.close();
        br.close();
    }
}
